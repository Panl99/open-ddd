// ---Auto Generated by Only4Play ---
package com.only4play.system.domain.invoice.enterpriseentity.mapper;

import com.only4play.common.mapper.DateMapper;
import com.only4play.common.mapper.GenericEnumMapper;
import com.only4play.system.domain.invoice.enterpriseentity.EnterpriseEntity;
import com.only4play.system.domain.invoice.enterpriseentity.creator.EnterpriseEntityCreator;
import com.only4play.system.domain.invoice.enterpriseentity.query.EnterpriseEntityQuery;
import com.only4play.system.domain.invoice.enterpriseentity.request.EnterpriseEntityCreateRequest;
import com.only4play.system.domain.invoice.enterpriseentity.request.EnterpriseEntityQueryRequest;
import com.only4play.system.domain.invoice.enterpriseentity.request.EnterpriseEntityUpdateRequest;
import com.only4play.system.domain.invoice.enterpriseentity.response.EnterpriseEntityResponse;
import com.only4play.system.domain.invoice.enterpriseentity.updater.EnterpriseEntityUpdater;
import com.only4play.system.domain.invoice.enterpriseentity.vo.EnterpriseEntityVO;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper(
    uses = {
        GenericEnumMapper.class,
        DateMapper.class
    }
)
public interface EnterpriseEntityMapper {
  EnterpriseEntityMapper INSTANCE = Mappers.getMapper(EnterpriseEntityMapper.class);

  EnterpriseEntity dtoToEntity(EnterpriseEntityCreator dto);

  EnterpriseEntityUpdater request2Updater(EnterpriseEntityUpdateRequest request);

  EnterpriseEntityCreator request2Dto(EnterpriseEntityCreateRequest request);

  EnterpriseEntityQuery request2Query(EnterpriseEntityQueryRequest request);

  EnterpriseEntityResponse vo2Response(EnterpriseEntityVO vo);

  default EnterpriseEntityResponse vo2CustomResponse(EnterpriseEntityVO vo) {
    EnterpriseEntityResponse response = vo2Response(vo);
    return response;
  }
}
