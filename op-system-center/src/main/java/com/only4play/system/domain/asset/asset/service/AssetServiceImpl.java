// ---Auto Generated by Only4Play ---
package com.only4play.system.domain.asset.asset.service;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.exception.BusinessException;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.system.domain.asset.asset.Asset;
import com.only4play.system.domain.asset.asset.query.AssetQuery;
import com.only4play.system.domain.asset.asset.repository.AssetRepository;
import com.only4play.system.domain.asset.asset.vo.AssetVO;
import com.querydsl.core.BooleanBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.Optional;
import java.util.stream.Collectors;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class AssetServiceImpl implements IAssetService {
  private final AssetRepository assetRepository;
  /**
   * findById
   */
  @Override
  public AssetVO findById(Long id) {
    Optional<Asset> asset =  assetRepository.findById(id);
    return new AssetVO(asset.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
  }

  /**
   * findByPage
   */
  @Override
  public Page<AssetVO> findByPage(PageRequestWrapper<AssetQuery> query) {
    BooleanBuilder booleanBuilder = new BooleanBuilder();
    Page<Asset> page = assetRepository.findAll(booleanBuilder,
            PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                Sort.Direction.DESC, "createdAt")));
    return new PageImpl<>(page.getContent().stream().map(entity -> new AssetVO(entity))
            .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
  }
}
