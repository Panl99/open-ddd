// ---Auto Generated by Only4Play ---
package com.only4play.system.domain.invoice.invoice.mapper;

import com.only4play.common.mapper.DateMapper;
import com.only4play.common.mapper.GenericEnumMapper;
import com.only4play.system.domain.invoice.invoice.Invoice;
import com.only4play.system.domain.invoice.invoice.creator.InvoiceCreator;
import com.only4play.system.domain.invoice.invoice.query.InvoiceQuery;
import com.only4play.system.domain.invoice.invoice.request.InvoiceCreateRequest;
import com.only4play.system.domain.invoice.invoice.request.InvoiceQueryRequest;
import com.only4play.system.domain.invoice.invoice.request.InvoiceUpdateRequest;
import com.only4play.system.domain.invoice.invoice.response.InvoiceResponse;
import com.only4play.system.domain.invoice.invoice.updater.InvoiceUpdater;
import com.only4play.system.domain.invoice.invoice.vo.InvoiceVO;
import com.only4play.system.infrastructure.converter.CustomMapper;
import com.only4play.system.infrastructure.elastic.InvoiceDocument;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper(
    uses = {
        GenericEnumMapper.class,
        DateMapper.class,
        CustomMapper.class
    }
)
public interface InvoiceMapper {
  InvoiceMapper INSTANCE = Mappers.getMapper(InvoiceMapper.class);

  Invoice dtoToEntity(InvoiceCreator dto);

  InvoiceUpdater request2Updater(InvoiceUpdateRequest request);

  InvoiceCreator request2Dto(InvoiceCreateRequest request);

  InvoiceQuery request2Query(InvoiceQueryRequest request);

  InvoiceResponse vo2Response(InvoiceVO vo);

  InvoiceDocument entity2Document(Invoice invoice);

  default InvoiceResponse vo2CustomResponse(InvoiceVO vo) {
    InvoiceResponse response = vo2Response(vo);
    return response;
  }
}
