// ---Auto Generated by Only4Play ---
package com.only4play.system.domain.invoice.orderreceipt.service;

import cn.hutool.core.collection.IterUtil;
import com.only4play.common.constants.CodeEnum;
import com.only4play.common.exception.BusinessException;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.jpa.support.EntityOperations;
import com.only4play.system.domain.invoice.invoice.Invoice;
import com.only4play.system.domain.invoice.invoice.repository.InvoiceRepository;
import com.only4play.system.domain.invoice.orderreceipt.OrderReceipt;
import com.only4play.system.domain.invoice.orderreceipt.ReceiptStatus;
import com.only4play.system.domain.invoice.orderreceipt.domainservice.IOrderReceiptDomainService;
import com.only4play.system.domain.invoice.orderreceipt.domainservice.model.exchange.ExchangeInvoiceModel;
import com.only4play.system.domain.invoice.orderreceipt.domainservice.model.exchange.ExchangeInvoiceResultModel;
import com.only4play.system.domain.invoice.orderreceipt.domainservice.model.register.OrderRegisterModel;
import com.only4play.system.domain.invoice.orderreceipt.domainservice.model.register.OrderRegisterResultModel;
import com.only4play.system.domain.invoice.orderreceipt.mapper.OrderReceiptMapper;
import com.only4play.system.domain.invoice.orderreceipt.query.OrderReceiptQuery;
import com.only4play.system.domain.invoice.orderreceipt.repository.OrderReceiptRepository;
import com.only4play.system.domain.invoice.orderreceipt.updater.OrderReceiptUpdater;
import com.only4play.system.domain.invoice.orderreceipt.vo.OrderReceiptVO;
import com.only4play.system.infrastructure.constants.InvoiceErrorCode;
import com.only4play.system.infrastructure.facade.IFlowNoFacade;
import com.querydsl.core.BooleanBuilder;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class OrderReceiptServiceImpl implements IOrderReceiptService {

  private final IOrderReceiptDomainService orderReceiptDomainService;
  private final OrderReceiptRepository orderReceiptRepository;
  private final IFlowNoFacade flowNoFacade;
  private final InvoiceRepository invoiceRepository;

  /**
   * 订单注册为凭据
   */
  @Override
  public Long createOrderReceipt(OrderRegisterModel model) {
    OrderReceipt orderReceipt = OrderReceiptMapper.INSTANCE.registerModel2Entity(model);
    orderReceipt.setRegisterFlowNo(flowNoFacade.getNextId());
    OrderRegisterResultModel resultModel = orderReceiptDomainService.orderRegister(model);
    Optional<OrderReceipt> receipt = EntityOperations
        .doCreate(orderReceiptRepository)
        .create(() -> orderReceipt)
        .update(e -> e.orderRegister(model, resultModel))
        .execute();
    return receipt.isPresent() ? receipt.get().getId() : 0;
  }

  /**
   * 凭据换取发票 -> 本质上就是凭据的更新操作
   * @param exchangeInvoiceModel
   */
  @Override
  public void exchangeInvoice(ExchangeInvoiceModel exchangeInvoiceModel) {
    ExchangeInvoiceResultModel resultModel = orderReceiptDomainService.exchangeInvoice(
        exchangeInvoiceModel);
    List<Long> flowNos = exchangeInvoiceModel.getFlowNos();
    exchangeInvoiceModel.setBatchNo(String.valueOf(flowNoFacade.getNextId()));
    //从性能上讲可以优化为批量操作，对于对象本身来讲，开票行为属于每个个体，技术和现实需要折中处理,这里要避免事件嵌套
    //将凭据批量更新为开票中，同时生成发票信息
    List<OrderReceipt> receiptList = orderReceiptRepository.findAllByRegisterFlowNoIn(
        flowNos);
    List<OrderReceipt> notUnMakingList = receiptList.stream()
        .filter(r -> !Objects.equals(r.getReceiptStatus(), ReceiptStatus.UNMAKING)).collect(
            Collectors.toList());
    if(IterUtil.isNotEmpty(notUnMakingList)){
      //如果存在不是未开票的则报错,并且将列表返回去
      throw new BusinessException(InvoiceErrorCode.INVOICE_NOT_ALLOW, notUnMakingList);
    }
    //批量修改为开票中
    receiptList.stream().forEach(r -> r.setReceiptStatus(ReceiptStatus.MAKING));
    orderReceiptRepository.saveAll(receiptList);
    resultModel.getInvoiceList().forEach(invoiceModel -> {
      Invoice invoice = new Invoice();
      invoice.setApplyFlowNo(String.valueOf(flowNoFacade.getNextId()));
      EntityOperations
          .doCreate(invoiceRepository)
          .create(() -> invoice)
          .update(e -> e.doCreate(exchangeInvoiceModel,invoiceModel))
          .execute();
    });

  }

  /**
   * update
   */
  @Override
  public void updateOrderReceipt(OrderReceiptUpdater updater) {
    EntityOperations.doUpdate(orderReceiptRepository)
        .loadById(updater.getId())
        .update(e -> updater.updateOrderReceipt(e))
        .execute();
  }

  /**
   * valid
   */
  @Override
  public void validOrderReceipt(Long id) {
    EntityOperations.doUpdate(orderReceiptRepository)
        .loadById(id)
        .update(e -> e.valid())
        .execute();
  }

  /**
   * invalid
   */
  @Override
  public void invalidOrderReceipt(Long id) {
    EntityOperations.doUpdate(orderReceiptRepository)
        .loadById(id)
        .update(e -> e.invalid())
        .execute();
  }

  /**
   * findById
   */
  @Override
  public OrderReceiptVO findById(Long id) {
    Optional<OrderReceipt> orderReceipt = orderReceiptRepository.findById(id);
    return new OrderReceiptVO(
        orderReceipt.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
  }

  /**
   * findByPage
   */
  @Override
  public Page<OrderReceiptVO> findByPage(PageRequestWrapper<OrderReceiptQuery> query) {
    BooleanBuilder booleanBuilder = new BooleanBuilder();
    Page<OrderReceipt> page = orderReceiptRepository.findAll(booleanBuilder,
        PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
            Sort.Direction.DESC, "createdAt")));
    return new PageImpl<>(page.getContent().stream().map(entity -> new OrderReceiptVO(entity))
        .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
  }
}
