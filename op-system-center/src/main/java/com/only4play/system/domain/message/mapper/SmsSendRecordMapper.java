// ---Auto Generated by Only4Play ---
package com.only4play.system.domain.message.mapper;

import com.only4play.common.mapper.DateMapper;
import com.only4play.common.mapper.GenericEnumMapper;
import com.only4play.system.domain.message.SmsSendRecord;
import com.only4play.system.domain.message.creator.SmsSendRecordCreator;
import com.only4play.system.domain.message.query.SmsSendRecordQuery;
import com.only4play.system.domain.message.request.SmsSendRecordCreateRequest;
import com.only4play.system.domain.message.request.SmsSendRecordQueryRequest;
import com.only4play.system.domain.message.request.SmsSendRecordUpdateRequest;
import com.only4play.system.domain.message.response.SmsSendRecordResponse;
import com.only4play.system.domain.message.updater.SmsSendRecordUpdater;
import com.only4play.system.domain.message.vo.SmsSendRecordVO;
import com.only4play.system.infrastructure.converter.CustomMapper;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper(
    uses = {
        GenericEnumMapper.class,
        DateMapper.class,
        CustomMapper.class
    }
)
public interface SmsSendRecordMapper {
  SmsSendRecordMapper INSTANCE = Mappers.getMapper(SmsSendRecordMapper.class);

  SmsSendRecord dtoToEntity(SmsSendRecordCreator dto);

  SmsSendRecordUpdater request2Updater(SmsSendRecordUpdateRequest request);

  SmsSendRecordCreator request2Dto(SmsSendRecordCreateRequest request);

  SmsSendRecordQuery request2Query(SmsSendRecordQueryRequest request);

  SmsSendRecordResponse vo2Response(SmsSendRecordVO vo);

  default SmsSendRecordResponse vo2CustomResponse(SmsSendRecordVO vo) {
    SmsSendRecordResponse response = vo2Response(vo);
    return response;
  }
}
