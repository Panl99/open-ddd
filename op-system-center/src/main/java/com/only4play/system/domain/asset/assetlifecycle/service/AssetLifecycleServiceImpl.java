// ---Auto Generated by Only4Play ---
package com.only4play.system.domain.asset.assetlifecycle.service;

import cn.hutool.core.collection.IterUtil;
import com.only4play.common.constants.CodeEnum;
import com.only4play.common.constants.ValidStatus;
import com.only4play.common.exception.BusinessException;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.jpa.support.EntityOperations;
import com.only4play.system.domain.asset.assetlifecycle.AssetLifecycle;
import com.only4play.system.domain.asset.assetlifecycle.QAssetLifecycle;
import com.only4play.system.domain.asset.assetlifecycle.creator.AssetLifecycleCreator;
import com.only4play.system.domain.asset.assetlifecycle.mapper.AssetLifecycleMapper;
import com.only4play.system.domain.asset.assetlifecycle.query.AssetLifecycleQuery;
import com.only4play.system.domain.asset.assetlifecycle.repository.AssetLifecycleRepository;
import com.only4play.system.domain.asset.assetlifecycle.updater.AssetLifecycleUpdater;
import com.only4play.system.domain.asset.assetlifecycle.vo.AssetLifecycleVO;
import com.querydsl.core.BooleanBuilder;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class AssetLifecycleServiceImpl implements IAssetLifecycleService {
  private final AssetLifecycleRepository assetLifecycleRepository;

  /**
   * createImpl
   */
  @Override
  public Long createAssetLifecycle(AssetLifecycleCreator creator) {
    Optional<AssetLifecycle> assetLifecycle = EntityOperations.doCreate(assetLifecycleRepository)
    .create(() -> AssetLifecycleMapper.INSTANCE.dtoToEntity(creator))
    .update(e -> e.init())
    .execute();
    return assetLifecycle.isPresent() ? assetLifecycle.get().getId() : 0;
  }

  @Override
  public void batchCreateLifecycle(String batchNo, List<AssetLifecycleCreator> creatorList) {
    BooleanBuilder bb = new BooleanBuilder().and(QAssetLifecycle.assetLifecycle.genBatchNo.eq(batchNo));
    //如果还想继续优化可以放到Redis里面进行判断
    Iterable<AssetLifecycle> all = assetLifecycleRepository.findAll(bb);
    if(IterUtil.isNotEmpty(all)){
      return;
    }
    List<AssetLifecycle> assetLifecycles = creatorList.stream()
        .map(c -> {
          AssetLifecycle assetLifecycle = AssetLifecycleMapper.INSTANCE.dtoToEntity(c);
          assetLifecycle.setValidStatus(ValidStatus.VALID);
          return assetLifecycle;
        })
        .collect(Collectors.toList());
    assetLifecycleRepository.saveAll(assetLifecycles);
  }

  /**
   * update
   */
  @Override
  public void updateAssetLifecycle(AssetLifecycleUpdater updater) {
    EntityOperations.doUpdate(assetLifecycleRepository)
    .loadById(updater.getId())
    .update(e -> updater.updateAssetLifecycle(e))
    .execute();
  }

  /**
   * valid
   */
  @Override
  public void validAssetLifecycle(Long id) {
    EntityOperations.doUpdate(assetLifecycleRepository)
    .loadById(id)
    .update(e -> e.valid())
    .execute();
  }

  /**
   * invalid
   */
  @Override
  public void invalidAssetLifecycle(Long id) {
    EntityOperations.doUpdate(assetLifecycleRepository)
    .loadById(id)
    .update(e -> e.invalid())
    .execute();
  }

  /**
   * findById
   */
  @Override
  public AssetLifecycleVO findById(Long id) {
    Optional<AssetLifecycle> assetLifecycle =  assetLifecycleRepository.findById(id);
    return new AssetLifecycleVO(assetLifecycle.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
  }

  /**
   * findByPage
   */
  @Override
  public Page<AssetLifecycleVO> findByPage(PageRequestWrapper<AssetLifecycleQuery> query) {
    BooleanBuilder booleanBuilder = new BooleanBuilder();
    Page<AssetLifecycle> page = assetLifecycleRepository.findAll(booleanBuilder,
            PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                Sort.Direction.DESC, "createdAt")));
    return new PageImpl<>(page.getContent().stream().map(entity -> new AssetLifecycleVO(entity))
            .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
  }
}
