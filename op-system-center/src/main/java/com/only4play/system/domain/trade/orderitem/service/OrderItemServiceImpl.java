// ---Auto Generated by Only4Play ---
package com.only4play.system.domain.trade.orderitem.service;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.exception.BusinessException;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.jpa.support.EntityOperations;
import com.only4play.system.domain.trade.orderitem.OrderItem;
import com.only4play.system.domain.trade.orderitem.creator.OrderItemCreator;
import com.only4play.system.domain.trade.orderitem.mapper.OrderItemMapper;
import com.only4play.system.domain.trade.orderitem.query.OrderItemQuery;
import com.only4play.system.domain.trade.orderitem.repository.OrderItemRepository;
import com.only4play.system.domain.trade.orderitem.updater.OrderItemUpdater;
import com.only4play.system.domain.trade.orderitem.vo.OrderItemVO;
import com.querydsl.core.BooleanBuilder;
import java.lang.Long;
import java.lang.Override;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class OrderItemServiceImpl implements IOrderItemService {
  private final OrderItemRepository orderItemRepository;

  /**
   * createImpl
   */
  @Override
  public Long createOrderItem(OrderItemCreator creator) {
    Optional<OrderItem> orderItem = EntityOperations.doCreate(orderItemRepository)
    .create(() -> OrderItemMapper.INSTANCE.dtoToEntity(creator))
    .update(e -> {})
    .execute();
    return orderItem.isPresent() ? orderItem.get().getId() : 0;
  }

  /**
   * update
   */
  @Override
  public void updateOrderItem(OrderItemUpdater updater) {
    EntityOperations.doUpdate(orderItemRepository)
    .loadById(updater.getId())
    .update(e -> updater.updateOrderItem(e))
    .execute();
  }

  /**
   * findById
   */
  @Override
  public OrderItemVO findById(Long id) {
    Optional<OrderItem> orderItem =  orderItemRepository.findById(id);
    return new OrderItemVO(orderItem.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
  }

  /**
   * findByPage
   */
  @Override
  public Page<OrderItemVO> findByPage(PageRequestWrapper<OrderItemQuery> query) {
    BooleanBuilder booleanBuilder = new BooleanBuilder();
    Page<OrderItem> page = orderItemRepository.findAll(booleanBuilder,
            PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                Sort.Direction.DESC, "createdAt")));
    return new PageImpl<>(page.getContent().stream().map(entity -> new OrderItemVO(entity))
            .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
  }
}
