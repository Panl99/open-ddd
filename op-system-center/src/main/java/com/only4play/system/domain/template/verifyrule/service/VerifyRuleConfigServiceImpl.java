// ---Auto Generated by Only4Play ---
package com.only4play.system.domain.template.verifyrule.service;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.exception.BusinessException;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.jpa.support.EntityOperations;
import com.only4play.system.domain.template.verifyrule.VerifyRuleConfig;
import com.only4play.system.domain.template.verifyrule.creator.VerifyRuleConfigCreator;
import com.only4play.system.domain.template.verifyrule.mapper.VerifyRuleConfigMapper;
import com.only4play.system.domain.template.verifyrule.query.VerifyRuleConfigQuery;
import com.only4play.system.domain.template.verifyrule.repository.VerifyRuleConfigRepository;
import com.only4play.system.domain.template.verifyrule.updater.VerifyRuleConfigUpdater;
import com.only4play.system.domain.template.verifyrule.vo.VerifyRuleConfigVO;
import com.querydsl.core.BooleanBuilder;
import java.lang.Long;
import java.lang.Override;
import java.util.Optional;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class VerifyRuleConfigServiceImpl implements IVerifyRuleConfigService {
  private final VerifyRuleConfigRepository verifyRuleConfigRepository;

  /**
   * createImpl
   */
  @Override
  public Long createVerifyRuleConfig(VerifyRuleConfigCreator creator) {
    Optional<VerifyRuleConfig> verifyRuleConfig = EntityOperations.doCreate(verifyRuleConfigRepository)
    .create(() -> VerifyRuleConfigMapper.INSTANCE.dtoToEntity(creator))
    .update(e -> e.init())
    .execute();
    return verifyRuleConfig.isPresent() ? verifyRuleConfig.get().getId() : 0;
  }

  /**
   * update
   */
  @Override
  public void updateVerifyRuleConfig(VerifyRuleConfigUpdater updater) {
    EntityOperations.doUpdate(verifyRuleConfigRepository)
    .loadById(updater.getId())
    .update(e -> updater.updateVerifyRuleConfig(e))
    .execute();
  }

  /**
   * valid
   */
  @Override
  public void validVerifyRuleConfig(Long id) {
    EntityOperations.doUpdate(verifyRuleConfigRepository)
    .loadById(id)
    .update(e -> e.valid())
    .execute();
  }

  /**
   * invalid
   */
  @Override
  public void invalidVerifyRuleConfig(Long id) {
    EntityOperations.doUpdate(verifyRuleConfigRepository)
    .loadById(id)
    .update(e -> e.invalid())
    .execute();
  }

  /**
   * findById
   */
  @Override
  public VerifyRuleConfigVO findById(Long id) {
    Optional<VerifyRuleConfig> verifyRuleConfig =  verifyRuleConfigRepository.findById(id);
    return new VerifyRuleConfigVO(verifyRuleConfig.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
  }

  /**
   * findByPage
   */
  @Override
  public Page<VerifyRuleConfigVO> findByPage(PageRequestWrapper<VerifyRuleConfigQuery> query) {
    BooleanBuilder booleanBuilder = new BooleanBuilder();
    Page<VerifyRuleConfig> page = verifyRuleConfigRepository.findAll(booleanBuilder,
            PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                Sort.Direction.DESC, "createdAt")));
    return new PageImpl<>(page.getContent().stream().map(entity -> new VerifyRuleConfigVO(entity))
            .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
  }
}
