// ---Auto Generated by Only4Play ---
package com.only4play.system.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.system.domain.invoice.enterpriseentity.creator.EnterpriseEntityCreator;
import com.only4play.system.domain.invoice.enterpriseentity.mapper.EnterpriseEntityMapper;
import com.only4play.system.domain.invoice.enterpriseentity.query.EnterpriseEntityQuery;
import com.only4play.system.domain.invoice.enterpriseentity.request.EnterpriseEntityCreateRequest;
import com.only4play.system.domain.invoice.enterpriseentity.request.EnterpriseEntityQueryRequest;
import com.only4play.system.domain.invoice.enterpriseentity.request.EnterpriseEntityUpdateRequest;
import com.only4play.system.domain.invoice.enterpriseentity.response.EnterpriseEntityResponse;
import com.only4play.system.domain.invoice.enterpriseentity.service.IEnterpriseEntityService;
import com.only4play.system.domain.invoice.enterpriseentity.updater.EnterpriseEntityUpdater;
import com.only4play.system.domain.invoice.enterpriseentity.vo.EnterpriseEntityVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("enterpriseEntity/v1")
@RequiredArgsConstructor
public class EnterpriseEntityController {
  private final IEnterpriseEntityService enterpriseEntityService;

  /**
   * createRequest
   */
  @PostMapping("createEnterpriseEntity")
  public JsonObject<Long> createEnterpriseEntity(
      @RequestBody EnterpriseEntityCreateRequest request) {
    EnterpriseEntityCreator creator = EnterpriseEntityMapper.INSTANCE.request2Dto(request);
    return JsonObject.success(enterpriseEntityService.createEnterpriseEntity(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateEnterpriseEntity")
  public JsonObject<String> updateEnterpriseEntity(
      @RequestBody EnterpriseEntityUpdateRequest request) {
    EnterpriseEntityUpdater updater = EnterpriseEntityMapper.INSTANCE.request2Updater(request);
    enterpriseEntityService.updateEnterpriseEntity(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validEnterpriseEntity(@PathVariable Long id) {
    enterpriseEntityService.validEnterpriseEntity(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidEnterpriseEntity(@PathVariable Long id) {
    enterpriseEntityService.invalidEnterpriseEntity(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<EnterpriseEntityResponse> findById(@PathVariable Long id) {
    EnterpriseEntityVO vo = enterpriseEntityService.findById(id);
    EnterpriseEntityResponse response = EnterpriseEntityMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<EnterpriseEntityResponse>> findByPage(
      @RequestBody PageRequestWrapper<EnterpriseEntityQueryRequest> request) {
    PageRequestWrapper<EnterpriseEntityQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(EnterpriseEntityMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<EnterpriseEntityVO> page = enterpriseEntityService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> EnterpriseEntityMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
