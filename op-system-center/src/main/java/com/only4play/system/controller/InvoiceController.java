// ---Auto Generated by Only4Play ---
package com.only4play.system.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.system.domain.invoice.invoice.creator.InvoiceCreator;
import com.only4play.system.domain.invoice.invoice.mapper.InvoiceMapper;
import com.only4play.system.domain.invoice.invoice.query.InvoiceQuery;
import com.only4play.system.domain.invoice.invoice.request.InvoiceCreateRequest;
import com.only4play.system.domain.invoice.invoice.request.InvoiceQueryRequest;
import com.only4play.system.domain.invoice.invoice.request.InvoiceUpdateRequest;
import com.only4play.system.domain.invoice.invoice.response.InvoiceResponse;
import com.only4play.system.domain.invoice.invoice.service.IInvoiceService;
import com.only4play.system.domain.invoice.invoice.updater.InvoiceUpdater;
import com.only4play.system.domain.invoice.invoice.vo.InvoiceVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("invoice/v1")
@RequiredArgsConstructor
public class InvoiceController {
  private final IInvoiceService invoiceService;

  /**
   * createRequest
   */
  @PostMapping("createInvoice")
  public JsonObject<Long> createInvoice(@RequestBody InvoiceCreateRequest request) {
    InvoiceCreator creator = InvoiceMapper.INSTANCE.request2Dto(request);
    return JsonObject.success(invoiceService.createInvoice(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateInvoice")
  public JsonObject<String> updateInvoice(@RequestBody InvoiceUpdateRequest request) {
    InvoiceUpdater updater = InvoiceMapper.INSTANCE.request2Updater(request);
    invoiceService.updateInvoice(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validInvoice(@PathVariable Long id) {
    invoiceService.validInvoice(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidInvoice(@PathVariable Long id) {
    invoiceService.invalidInvoice(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<InvoiceResponse> findById(@PathVariable Long id) {
    InvoiceVO vo = invoiceService.findById(id);
    InvoiceResponse response = InvoiceMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<InvoiceResponse>> findByPage(
      @RequestBody PageRequestWrapper<InvoiceQueryRequest> request) {
    PageRequestWrapper<InvoiceQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(InvoiceMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<InvoiceVO> page = invoiceService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> InvoiceMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
