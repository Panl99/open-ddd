// ---Auto Generated by Only4Play ---
package com.only4play.system.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.system.domain.invoice.orderreceipt.creator.OrderReceiptCreator;
import com.only4play.system.domain.invoice.orderreceipt.mapper.OrderReceiptMapper;
import com.only4play.system.domain.invoice.orderreceipt.query.OrderReceiptQuery;
import com.only4play.system.domain.invoice.orderreceipt.request.OrderReceiptCreateRequest;
import com.only4play.system.domain.invoice.orderreceipt.request.OrderReceiptQueryRequest;
import com.only4play.system.domain.invoice.orderreceipt.request.OrderReceiptUpdateRequest;
import com.only4play.system.domain.invoice.orderreceipt.response.OrderReceiptResponse;
import com.only4play.system.domain.invoice.orderreceipt.service.IOrderReceiptService;
import com.only4play.system.domain.invoice.orderreceipt.updater.OrderReceiptUpdater;
import com.only4play.system.domain.invoice.orderreceipt.vo.OrderReceiptVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("orderReceipt/v1")
@RequiredArgsConstructor
public class OrderReceiptController {
  private final IOrderReceiptService orderReceiptService;

  /**
   * createRequest
   */
  @PostMapping("createOrderReceipt")
  public JsonObject<Long> createOrderReceipt(@RequestBody OrderReceiptCreateRequest request) {
    OrderReceiptCreator creator = OrderReceiptMapper.INSTANCE.request2Dto(request);
    return null;
  }

  /**
   * update request
   */
  @PostMapping("updateOrderReceipt")
  public JsonObject<String> updateOrderReceipt(@RequestBody OrderReceiptUpdateRequest request) {
    OrderReceiptUpdater updater = OrderReceiptMapper.INSTANCE.request2Updater(request);
    orderReceiptService.updateOrderReceipt(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validOrderReceipt(@PathVariable Long id) {
    orderReceiptService.validOrderReceipt(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidOrderReceipt(@PathVariable Long id) {
    orderReceiptService.invalidOrderReceipt(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<OrderReceiptResponse> findById(@PathVariable Long id) {
    OrderReceiptVO vo = orderReceiptService.findById(id);
    OrderReceiptResponse response = OrderReceiptMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<OrderReceiptResponse>> findByPage(
      @RequestBody PageRequestWrapper<OrderReceiptQueryRequest> request) {
    PageRequestWrapper<OrderReceiptQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(OrderReceiptMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<OrderReceiptVO> page = orderReceiptService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> OrderReceiptMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
