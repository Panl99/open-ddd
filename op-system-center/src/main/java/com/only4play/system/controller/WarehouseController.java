// ---Auto Generated by Only4Play ---
package com.only4play.system.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.system.domain.asset.warehouse.creator.WarehouseCreator;
import com.only4play.system.domain.asset.warehouse.mapper.WarehouseMapper;
import com.only4play.system.domain.asset.warehouse.query.WarehouseQuery;
import com.only4play.system.domain.asset.warehouse.request.WarehouseCreateRequest;
import com.only4play.system.domain.asset.warehouse.request.WarehouseQueryRequest;
import com.only4play.system.domain.asset.warehouse.request.WarehouseUpdateRequest;
import com.only4play.system.domain.asset.warehouse.response.WarehouseResponse;
import com.only4play.system.domain.asset.warehouse.service.IWarehouseService;
import com.only4play.system.domain.asset.warehouse.updater.WarehouseUpdater;
import com.only4play.system.domain.asset.warehouse.vo.WarehouseVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("warehouse/v1")
@RequiredArgsConstructor
public class WarehouseController {
  private final IWarehouseService warehouseService;

  /**
   * createRequest
   */
  @PostMapping("createWarehouse")
  public JsonObject<Long> createWarehouse(@RequestBody WarehouseCreateRequest request) {
    WarehouseCreator creator = WarehouseMapper.INSTANCE.request2Dto(request);
    return JsonObject.success(warehouseService.createWarehouse(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateWarehouse")
  public JsonObject<String> updateWarehouse(@RequestBody WarehouseUpdateRequest request) {
    WarehouseUpdater updater = WarehouseMapper.INSTANCE.request2Updater(request);
    warehouseService.updateWarehouse(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validWarehouse(@PathVariable Long id) {
    warehouseService.validWarehouse(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidWarehouse(@PathVariable Long id) {
    warehouseService.invalidWarehouse(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<WarehouseResponse> findById(@PathVariable Long id) {
    WarehouseVO vo = warehouseService.findById(id);
    WarehouseResponse response = WarehouseMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<WarehouseResponse>> findByPage(
      @RequestBody PageRequestWrapper<WarehouseQueryRequest> request) {
    PageRequestWrapper<WarehouseQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(WarehouseMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<WarehouseVO> page = warehouseService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> WarehouseMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
