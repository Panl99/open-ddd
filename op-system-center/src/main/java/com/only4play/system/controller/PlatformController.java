// ---Auto Generated by Only4Play ---
package com.only4play.system.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.system.domain.permission.platform.creator.PlatformCreator;
import com.only4play.system.domain.permission.platform.mapper.PlatformMapper;
import com.only4play.system.domain.permission.platform.query.PlatformQuery;
import com.only4play.system.domain.permission.platform.request.PlatformCreateRequest;
import com.only4play.system.domain.permission.platform.request.PlatformQueryRequest;
import com.only4play.system.domain.permission.platform.request.PlatformUpdateRequest;
import com.only4play.system.domain.permission.platform.response.PlatformResponse;
import com.only4play.system.domain.permission.platform.service.IPlatformService;
import com.only4play.system.domain.permission.platform.updater.PlatformUpdater;
import com.only4play.system.domain.permission.platform.vo.PlatformVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("platform/v1")
@RequiredArgsConstructor
public class PlatformController {
  private final IPlatformService platformService;

  /**
   * createRequest
   */
  @PostMapping("createPlatform")
  public JsonObject<Long> createPlatform(@RequestBody PlatformCreateRequest request) {
    PlatformCreator creator = PlatformMapper.INSTANCE.request2Dto(request);
    return JsonObject.success(platformService.createPlatform(creator));
  }

  /**
   * update request
   */
  @PostMapping("updatePlatform")
  public JsonObject<String> updatePlatform(@RequestBody PlatformUpdateRequest request) {
    PlatformUpdater updater = PlatformMapper.INSTANCE.request2Updater(request);
    platformService.updatePlatform(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validPlatform(@PathVariable Long id) {
    platformService.validPlatform(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidPlatform(@PathVariable Long id) {
    platformService.invalidPlatform(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<PlatformResponse> findById(@PathVariable Long id) {
    PlatformVO vo = platformService.findById(id);
    PlatformResponse response = PlatformMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<PlatformResponse>> findByPage(
      @RequestBody PageRequestWrapper<PlatformQueryRequest> request) {
    PageRequestWrapper<PlatformQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(PlatformMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<PlatformVO> page = platformService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> PlatformMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
