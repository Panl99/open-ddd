// ---Auto Generated by Only4Play ---
package com.only4play.system.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.system.domain.template.verifyrule.creator.VerifyRuleConfigCreator;
import com.only4play.system.domain.template.verifyrule.mapper.VerifyRuleConfigMapper;
import com.only4play.system.domain.template.verifyrule.query.VerifyRuleConfigQuery;
import com.only4play.system.domain.template.verifyrule.request.VerifyRuleConfigCreateRequest;
import com.only4play.system.domain.template.verifyrule.request.VerifyRuleConfigQueryRequest;
import com.only4play.system.domain.template.verifyrule.request.VerifyRuleConfigUpdateRequest;
import com.only4play.system.domain.template.verifyrule.response.VerifyRuleConfigResponse;
import com.only4play.system.domain.template.verifyrule.service.IVerifyRuleConfigService;
import com.only4play.system.domain.template.verifyrule.updater.VerifyRuleConfigUpdater;
import com.only4play.system.domain.template.verifyrule.vo.VerifyRuleConfigVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import javax.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("verifyRuleConfig/v1")
@RequiredArgsConstructor
@Validated
public class VerifyRuleConfigController {
  private final IVerifyRuleConfigService verifyRuleConfigService;

  /**
   * createRequest
   */
  @PostMapping("createVerifyRuleConfig")
  public JsonObject<Long> createVerifyRuleConfig(
      @RequestBody VerifyRuleConfigCreateRequest request) {
    VerifyRuleConfigCreator creator = VerifyRuleConfigMapper.INSTANCE.request2Dto(request);
    return JsonObject.success(verifyRuleConfigService.createVerifyRuleConfig(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateVerifyRuleConfig")
  public JsonObject<String> updateVerifyRuleConfig(
      @Valid @RequestBody VerifyRuleConfigUpdateRequest request) {
    VerifyRuleConfigUpdater updater = VerifyRuleConfigMapper.INSTANCE.request2Updater(request);
    verifyRuleConfigService.updateVerifyRuleConfig(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validVerifyRuleConfig(@PathVariable Long id) {
    verifyRuleConfigService.validVerifyRuleConfig(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidVerifyRuleConfig(@PathVariable Long id) {
    verifyRuleConfigService.invalidVerifyRuleConfig(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<VerifyRuleConfigResponse> findById(@PathVariable Long id) {
    VerifyRuleConfigVO vo = verifyRuleConfigService.findById(id);
    VerifyRuleConfigResponse response = VerifyRuleConfigMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<VerifyRuleConfigResponse>> findByPage(
      @RequestBody PageRequestWrapper<VerifyRuleConfigQueryRequest> request) {
    PageRequestWrapper<VerifyRuleConfigQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(VerifyRuleConfigMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<VerifyRuleConfigVO> page = verifyRuleConfigService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> VerifyRuleConfigMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
