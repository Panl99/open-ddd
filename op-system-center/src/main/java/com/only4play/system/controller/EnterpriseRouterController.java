// ---Auto Generated by Only4Play ---
package com.only4play.system.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.system.domain.invoice.enterpriserouter.creator.EnterpriseRouterCreator;
import com.only4play.system.domain.invoice.enterpriserouter.mapper.EnterpriseRouterMapper;
import com.only4play.system.domain.invoice.enterpriserouter.query.EnterpriseRouterQuery;
import com.only4play.system.domain.invoice.enterpriserouter.request.EnterpriseRouterCreateRequest;
import com.only4play.system.domain.invoice.enterpriserouter.request.EnterpriseRouterQueryRequest;
import com.only4play.system.domain.invoice.enterpriserouter.request.EnterpriseRouterUpdateRequest;
import com.only4play.system.domain.invoice.enterpriserouter.response.EnterpriseRouterResponse;
import com.only4play.system.domain.invoice.enterpriserouter.service.IEnterpriseRouterService;
import com.only4play.system.domain.invoice.enterpriserouter.updater.EnterpriseRouterUpdater;
import com.only4play.system.domain.invoice.enterpriserouter.vo.EnterpriseRouterVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("enterpriseRouter/v1")
@RequiredArgsConstructor
public class EnterpriseRouterController {
  private final IEnterpriseRouterService enterpriseRouterService;

  /**
   * createRequest
   */
  @PostMapping("createEnterpriseRouter")
  public JsonObject<Long> createEnterpriseRouter(
      @RequestBody EnterpriseRouterCreateRequest request) {
    EnterpriseRouterCreator creator = EnterpriseRouterMapper.INSTANCE.request2Dto(request);
    return JsonObject.success(enterpriseRouterService.createEnterpriseRouter(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateEnterpriseRouter")
  public JsonObject<String> updateEnterpriseRouter(
      @RequestBody EnterpriseRouterUpdateRequest request) {
    EnterpriseRouterUpdater updater = EnterpriseRouterMapper.INSTANCE.request2Updater(request);
    enterpriseRouterService.updateEnterpriseRouter(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validEnterpriseRouter(@PathVariable Long id) {
    enterpriseRouterService.validEnterpriseRouter(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidEnterpriseRouter(@PathVariable Long id) {
    enterpriseRouterService.invalidEnterpriseRouter(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<EnterpriseRouterResponse> findById(@PathVariable Long id) {
    EnterpriseRouterVO vo = enterpriseRouterService.findById(id);
    EnterpriseRouterResponse response = EnterpriseRouterMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<EnterpriseRouterResponse>> findByPage(
      @RequestBody PageRequestWrapper<EnterpriseRouterQueryRequest> request) {
    PageRequestWrapper<EnterpriseRouterQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(EnterpriseRouterMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<EnterpriseRouterVO> page = enterpriseRouterService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> EnterpriseRouterMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
