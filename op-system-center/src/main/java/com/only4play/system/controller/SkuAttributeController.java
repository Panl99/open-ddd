// ---Auto Generated by Only4Play ---
package com.only4play.system.controller;

import com.only4play.common.constants.CodeEnum;
import com.only4play.common.model.JsonObject;
import com.only4play.common.model.PageRequestWrapper;
import com.only4play.common.model.PageResult;
import com.only4play.system.domain.objectsku.creator.SkuAttributeCreator;
import com.only4play.system.domain.objectsku.mapper.SkuAttributeMapper;
import com.only4play.system.domain.objectsku.query.SkuAttributeQuery;
import com.only4play.system.domain.objectsku.request.SkuAttributeCreateRequest;
import com.only4play.system.domain.objectsku.request.SkuAttributeQueryRequest;
import com.only4play.system.domain.objectsku.request.SkuAttributeUpdateRequest;
import com.only4play.system.domain.objectsku.response.SkuAttributeResponse;
import com.only4play.system.domain.objectsku.service.ISkuAttributeService;
import com.only4play.system.domain.objectsku.updater.SkuAttributeUpdater;
import com.only4play.system.domain.objectsku.vo.SkuAttributeVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("skuAttribute/v1")
@RequiredArgsConstructor
public class SkuAttributeController {
  private final ISkuAttributeService skuAttributeService;

  /**
   * createRequest
   */
  @PostMapping("createSkuAttribute")
  public JsonObject<Long> createSkuAttribute(@RequestBody SkuAttributeCreateRequest request) {
    SkuAttributeCreator creator = SkuAttributeMapper.INSTANCE.request2Dto(request);
    return JsonObject.success(skuAttributeService.createSkuAttribute(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateSkuAttribute")
  public JsonObject<String> updateSkuAttribute(@RequestBody SkuAttributeUpdateRequest request) {
    SkuAttributeUpdater updater = SkuAttributeMapper.INSTANCE.request2Updater(request);
    skuAttributeService.updateSkuAttribute(updater);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonObject<String> validSkuAttribute(@PathVariable Long id) {
    skuAttributeService.validSkuAttribute(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonObject<String> invalidSkuAttribute(@PathVariable Long id) {
    skuAttributeService.invalidSkuAttribute(id);
    return JsonObject.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonObject<SkuAttributeResponse> findById(@PathVariable Long id) {
    SkuAttributeVO vo = skuAttributeService.findById(id);
    SkuAttributeResponse response = SkuAttributeMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonObject.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonObject<PageResult<SkuAttributeResponse>> findByPage(
      @RequestBody PageRequestWrapper<SkuAttributeQueryRequest> request) {
    PageRequestWrapper<SkuAttributeQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(SkuAttributeMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
    Page<SkuAttributeVO> page = skuAttributeService.findByPage(wrapper);
    return JsonObject.success(
            PageResult.of(
                page.getContent().stream()
                    .map(vo -> SkuAttributeMapper.INSTANCE.vo2CustomResponse(vo))
                    .collect(Collectors.toList()),
                page.getTotalElements(),
                page.getSize(),
                page.getNumber())
        );
  }
}
